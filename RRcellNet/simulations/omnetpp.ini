[General]
# General simulation parameters
network = rrcellnet.CellularNetwork
sim-time-limit = 1min
cpu-time-limit = 300s

# Network Topology and Protocol parameters
**.nUsersCell = 10				# number of users in the cell
**.**.timeFramePeriod = 1ms		# typical timeslot period
**.**.nFrameSlots = 25

# WebServer RNG parameters
**.webServer[*].lambda = ${usertraffic=0.1..4.1 step 0.5}
**.webServer[*].size_uniform_a = 3
**.webServer[*].size_uniform_b = 75

# CellularNetwork MobileStations RNG parameters
#   MobileStation binomial generates values between 1 and n+1 (and not 0 and n)
#   so we choose n=15 to generate valid CQIs
CellularNetwork.users[*].cqi_binomial_n = 14
CellularNetwork.users[*].cqi_binomial_p = 0.5 # default value

# Repetitions and RNG seeds
repeat = 10					# Hint from Stea slides (pag.105 simulation)
seed-set = ${repetition}	# Change seed-set for each repetition
num-rngs = 30				# interarrivals, service demands and CQIs

#  interarrival seeds
**.webServer[0].rng-0 = 0
**.webServer[1].rng-0 = 1
**.webServer[2].rng-0 = 2
**.webServer[3].rng-0 = 3
**.webServer[4].rng-0 = 4
**.webServer[5].rng-0 = 5
**.webServer[6].rng-0 = 6
**.webServer[7].rng-0 = 7
**.webServer[8].rng-0 = 8
**.webServer[9].rng-0 = 9

#  pkt size seeds
**.webServer[0].rng-1 = 10
**.webServer[1].rng-1 = 11
**.webServer[2].rng-1 = 12
**.webServer[3].rng-1 = 13
**.webServer[4].rng-1 = 14
**.webServer[5].rng-1 = 15
**.webServer[6].rng-1 = 16
**.webServer[7].rng-1 = 17
**.webServer[8].rng-1 = 18
**.webServer[9].rng-1 = 19

#  CQI seeds
**.MobileStation[0].rng-0 = 20
**.MobileStation[1].rng-0 = 21
**.MobileStation[2].rng-0 = 22
**.MobileStation[3].rng-0 = 23
**.MobileStation[4].rng-0 = 24
**.MobileStation[5].rng-0 = 25
**.MobileStation[6].rng-0 = 26
**.MobileStation[7].rng-0 = 27
**.MobileStation[8].rng-0 = 28
**.MobileStation[9].rng-0 = 29

#**.webServer.rng-0 = ${rng_index=0..$NUSERS}
#**.webServer[*].rng-1 = ${rng_index2=$rng_index..${$rng_index+$NUSERS}}
#**.MobileStation[*].rng-0 = ${rng_index3=$rng_index2..${$rng_index2+$NUSERS}}

# exponential interarrivals, uniform service demands, uniform CQIs

[Config UniformCQI]

	# frame fill scheduling policy
	**.bestCQIScheduler = false

	# use uniform distribution for CQI rng
	CellularNetwork.users[*].isBinomial = false


[Config UniformCQI_bestCQIScheduler]
extends = UniformCQI

	# Frame fill scheduling policy
	**.bestCQIScheduler = true


# exponential interarrivals, uniform service demands, binomial CQIs,
# CQI mean very different among users

[Config BinomialCQI]

	# Frame fill scheduling policy
	**.bestCQIScheduler = false

	# use binomial distribution for CQI rng
	CellularNetwork.users[*].isBinomial = true

	# remember that E[binomial] = n*p
	CellularNetwork.users[0].cqi_binomial_p = 0.13
	CellularNetwork.users[1].cqi_binomial_p = 0.22
	CellularNetwork.users[2].cqi_binomial_p = 0.31
	CellularNetwork.users[3].cqi_binomial_p = 0.40
	CellularNetwork.users[4].cqi_binomial_p = 0.49
	CellularNetwork.users[5].cqi_binomial_p = 0.58
	CellularNetwork.users[6].cqi_binomial_p = 0.67
	CellularNetwork.users[7].cqi_binomial_p = 0.76
	CellularNetwork.users[8].cqi_binomial_p = 0.85
	CellularNetwork.users[9].cqi_binomial_p = 0.94


# Binomial using bestcqi scheduler

[Config BinomialCQI_bestCQIScheduler]
extends = BinomialCQI

	# Frame fill scheduling policy
	**.bestCQIScheduler = true