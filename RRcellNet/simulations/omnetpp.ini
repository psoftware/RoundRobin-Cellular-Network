[General]
# General simulation parameters
network = rrcellnet.CellularNetwork
sim-time-limit = 1min

# Network Topology and Protocol parameters
**.**.timeFramePeriod = 1ms		# typical timeslot period
**.**.nFrameSlots = 25

# WebServer RNG parameters
**.webServer[*].size_uniform_a = 3
**.webServer[*].size_uniform_b = 75

# CellularNetwork MobileStations RNG parameters
#   MobileStation binomial generates values between 1 and n+1 (and not 0 and n)
#   so we choose n=15 to generate valid CQIs
CellularNetwork.users[*].cqi_binomial_n = 14
CellularNetwork.users[*].cqi_binomial_p = 0.5 # default value

### Those parameters must be used ONLY INTO VALIDATION SCENARIOS
CellularNetwork.users[*].validationCQI = false
CellularNetwork.users[*].fixedCQI = 0 # this is not used if validationCQI is false
**.webServer[*].fixedRate = false
###

# Repetitions and RNG seeds
repeat = 10					# Hint from Stea slides (pag.105 simulation)
seed-set = ${repetition}	# Change seed-set for each repetition

warmup-period = 0.3s


[Config Validation]
	**.nUsersCell = 1			# number of users in the cell
	
	# interarrival rate iterations
	**.webServer[*].lambda = ${usertraffic=1..32 step 1 }
	#**.webServer[*].lambda = 100
	**.webServer[*].fixedRate = true

	# use uniform distribution for CQI rng
	CellularNetwork.users[*].isBinomial = false
	CellularNetwork.users[*].validationCQI = true
	CellularNetwork.users[*].fixedCQI = 15

	# Frame fill scheduling policy
	**.bestCQIScheduler = false

	# RNGs and seeds
	num-rngs = 3

	**.webServer[0].rng-0 = 0
	**.webServer[0].rng-1 = 1
	**.MobileStation[0].rng-0 = 2

	# WebServer RNG parameters
	**.webServer[*].size_uniform_a = 75
	**.webServer[*].size_uniform_b = 75

	**.vector-recording = false

	
# Regression test: one user, uniform cqi, exponential interarrivals
[Config RegressionTest]

	**.nUsersCell = 1			# number of users in the cell

	# interarrival rate iterations
	**.webServer[*].lambda = ${usertraffic=0.1..26.1 step 2}

	# use uniform distribution for CQI rng
	CellularNetwork.users[*].isBinomial = false

	# Frame fill scheduling policy
	**.bestCQIScheduler = false

	# RNGs and seeds
	num-rngs = 3

	**.webServer[0].rng-0 = 0
	**.webServer[0].rng-1 = 1
	**.MobileStation[0].rng-0 = 2

[Config CommonScenario]

	**.nUsersCell = 10			# number of users in the cell

	# RNGs and seeds
	num-rngs = 30				# global RNGs count

	#  interarrival seeds
	**.webServer[0].rng-0 = 0
	**.webServer[1].rng-0 = 1
	**.webServer[2].rng-0 = 2
	**.webServer[3].rng-0 = 3
	**.webServer[4].rng-0 = 4
	**.webServer[5].rng-0 = 5
	**.webServer[6].rng-0 = 6
	**.webServer[7].rng-0 = 7
	**.webServer[8].rng-0 = 8
	**.webServer[9].rng-0 = 9

	#  pkt size seeds
	**.webServer[0].rng-1 = 10
	**.webServer[1].rng-1 = 11
	**.webServer[2].rng-1 = 12
	**.webServer[3].rng-1 = 13
	**.webServer[4].rng-1 = 14
	**.webServer[5].rng-1 = 15
	**.webServer[6].rng-1 = 16
	**.webServer[7].rng-1 = 17
	**.webServer[8].rng-1 = 18
	**.webServer[9].rng-1 = 19

	#  CQI seeds
	**.MobileStation[0].rng-0 = 20
	**.MobileStation[1].rng-0 = 21
	**.MobileStation[2].rng-0 = 22
	**.MobileStation[3].rng-0 = 23
	**.MobileStation[4].rng-0 = 24
	**.MobileStation[5].rng-0 = 25
	**.MobileStation[6].rng-0 = 26
	**.MobileStation[7].rng-0 = 27
	**.MobileStation[8].rng-0 = 28
	**.MobileStation[9].rng-0 = 29

	**.vector-recording = false
	
# exponential interarrivals, uniform service demands, uniform CQIs

[Config UniformCQI]
extends = CommonScenario

	# interarrival rate iterations
	**.webServer[*].lambda = ${usertraffic=0.1..4.1 step 0.5}

	# frame fill scheduling policy
	**.bestCQIScheduler = false

	# use uniform distribution for CQI rng
	CellularNetwork.users[*].isBinomial = false


[Config UniformCQI_bestCQIScheduler]
extends = UniformCQI

	# Frame fill scheduling policy
	**.bestCQIScheduler = true


# exponential interarrivals, uniform service demands, binomial CQIs,
# CQI mean very different among users

[Config BinomialCQI]
extends = CommonScenario

	# interarrival rate iterations
	**.webServer[*].lambda = ${usertraffic=0.1..9.6 step 0.5}

	# Frame fill scheduling policy
	**.bestCQIScheduler = false

	# use binomial distribution for CQI rng
	CellularNetwork.users[*].isBinomial = true

	# remember that E[binomial] = n*p
	CellularNetwork.users[0].cqi_binomial_p = 0.13
	CellularNetwork.users[1].cqi_binomial_p = 0.22
	CellularNetwork.users[2].cqi_binomial_p = 0.31
	CellularNetwork.users[3].cqi_binomial_p = 0.40
	CellularNetwork.users[4].cqi_binomial_p = 0.49
	CellularNetwork.users[5].cqi_binomial_p = 0.58
	CellularNetwork.users[6].cqi_binomial_p = 0.67
	CellularNetwork.users[7].cqi_binomial_p = 0.76
	CellularNetwork.users[8].cqi_binomial_p = 0.85
	CellularNetwork.users[9].cqi_binomial_p = 0.94


# Binomial using bestcqi scheduler

[Config BinomialCQI_bestCQIScheduler]
extends = BinomialCQI

	# Frame fill scheduling policy
	**.bestCQIScheduler = true